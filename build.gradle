import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://dl.bintray.com/ctoestreich/grails-plugins" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.4.7"
        if(DefaultNativePlatform.currentArchitecture.name.toLowerCase().contains("aarch64") || DefaultNativePlatform.currentArchitecture.name.toLowerCase().contains("arm-v8")) {
            // Apple M1-chip
            classpath 'com.bertramlabs.plugins:sass-dart-asset-pipeline:3.4.7'
        } else {
            classpath "com.bertramlabs.plugins:sass-asset-pipeline:3.4.7"
        }
        classpath "org.grails.plugins:hibernate5:7.3.0"
        classpath "org.grails.plugins:database-migration:3.1.0"
    }
}

version "2.0.8-rc01-SNAPSHOT"
group "se.su.it"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin:"maven-publish"

repositories {
    mavenLocal()
    maven { url "https://maven.it.su.se/repository/public" }
    maven { url "https://repo.grails.org/grails/core" }
}

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-dependencies"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.6.11.Final"
    implementation "org.hibernate:hibernate-ehcache:5.6.11.Final"
    implementation "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
    implementation "se.su.it.tomcat:tomcat-header-encoding-valve:2.3"
    implementation 'mysql:mysql-connector-java:8.0.22'
    implementation 'org.liquibase:liquibase-core:3.6.3'
    implementation "org.grails.plugins:database-migration:3.1.0"
    implementation "org.apache.commons:commons-email:1.4"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.7"
    println("Vilken architecture har jag idag: ${DefaultNativePlatform.currentArchitecture.name.toLowerCase()}")
    if(DefaultNativePlatform.currentArchitecture.name.toLowerCase().contains("aarch64") || DefaultNativePlatform.currentArchitecture.name.toLowerCase().contains("arm-v8")) {
        // Apple M1-chip
        runtimeOnly 'com.bertramlabs.plugins:sass-dart-asset-pipeline:3.4.7'
    } else {
        runtimeOnly "com.bertramlabs.plugins:sass-asset-pipeline:3.4.7"
    }
    implementation 'org.grails.plugins:build-test-data:4.0.0'
    implementation group: 'org.springframework', name: 'spring-aspects'
    implementation group: 'org.aspectj', name: 'aspectjweaver'

    runtimeOnly "org.codehaus.groovy:groovy-dateutil"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtimeOnly "com.h2database:h2"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"
}

springBoot {
    //mainClassName = 'vaulttool.Application'
}

ext {
    grailsVersion = project.grailsVersion
}

bootRun {
    systemProperties = System.properties
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx2048m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

bootWar {
    enabled = true
    archiveName 'vaulttool.war'
    classifier ''
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx2048m']
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

assets {
    minifyJs = true
    minifyCss = true
}

publish {
    dependsOn assemble
}

publishing {
  publications {
    mavenJava(MavenPublication) {
        artifactId = 'vaulttool'
        from components.web
    }
  }

  repositories {
    maven {
      credentials {
          username project.hasProperty('nexusUsername') ? project.property('nexusUsername') : ''
          password project.hasProperty('nexusPassword') ? project.property('nexusPassword') : ''
      }
      if(project.version.endsWith('-SNAPSHOT')) {
          name "it.su.se-jenkins-snapshot"
          url "https://maven.it.su.se/repository/it.su.se-jenkins-snapshot"
      } else {
          name "it.su.se-jenkins-release"
          url "https://maven.it.su.se/repository/it.su.se-jenkins-release"
      }
    }
  }
}
